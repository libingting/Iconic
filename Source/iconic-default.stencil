// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import UIKit

{% if icons %}
/** A list with available icon glyphs from the icon font. */
@objc public enum {{enumName}}: Int {
    {% for icon in icons %}
    case {{icon.name|swiftIdentifier|snakeToCamelCase|lowerFirstWord}}Icon
    {% endfor %}

    /** The icon font's total count of available icons. */
    public static var count: Int { return {{ icons.count }} }
}

extension {{enumName}} : IconDrawable {

    /** The icon font's family name. */
    public static var familyName: String {
        return "{{familyName}}"
    }

    /**
     Creates a new instance with the specified icon name.
     If there is no valid name is recognised, this initializer falls back to the first available icon.

     - parameter iconName: The icon name to use for the new instance.
     */
    public init(named iconName: String) {
        switch iconName.lowercased() {
        {% for icon in icons %}
        case "{{icon.name|swiftIdentifier|lowercase}}": self = .{{icon.name|swiftIdentifier|snakeToCamelCase|lowerFirstWord}}Icon
        {% endfor %}
        default: self = {{enumName}}(rawValue: 0)!
        }
    }

    /** The icon's name. */
    public var name: String {
        switch self {
        {% for icon in icons %}
        case .{{icon.name|swiftIdentifier|snakeToCamelCase|lowerFirstWord}}Icon: return "{{icon.name|swiftIdentifier|lowercase}}"
        {% endfor %}
        }
    }

    /** The icon's unicode. */
    public var unicode: String {
        switch self {
            {% for icon in icons %}
        case .{{icon.name|swiftIdentifier|snakeToCamelCase|lowerFirstWord}}Icon: return "{{icon.unicode|unicodeCase}}"
            {% endfor %}
        }
    }
}
{% else %}
// No icons found for {{familyName}} font!
// Visit https://github.com/dzenbot/Iconic/issues for further information.
{% endif %}
