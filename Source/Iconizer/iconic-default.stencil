// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import UIKit

{% if icons %}

/**
wrapper functions for objective-c compatibility
*/
public extension Iconic {

    /** returns the number of icons in the font */
    @objc class var {{enumName|lowerFirstWord}}Count: Int{
        return {{enumName}}.count
    }

    /**
    Registers the icon font to Iconic.
    You shall do this once, when launching your application. Internally, the icon mapping is retrieved and
    kept in memory during the application's life term.
    */
    @objc class func register{{enumName}}Font() {
        {{enumName}}.register()
    }

    /**
    Creates an attributed string with the specified icon enum type, with optional color.

    - parameter icon: The icon enum type.
    - parameter size: The size of the text, in points.
    - parameter color: Optional color to be applied to the icon.
    */
    @objc class func attributedString(with{{enumName}} icon: {{enumName}},
        size: CGFloat,
        color: UIColor?) -> NSAttributedString? {
        return icon.attributedString(pointSize: size, color: color)
    }

    /**
    Creates an attributed string with the specified icon enum type, with optional color and alignment.
    The optional alinment can be really helpful when appending an icon to another attributed string with different fonts.
    It may also help for adjusting the icon's baseline, when using either top and bottom insets.

    - parameter icon: The icon enum type.
    - parameter size: The size of the text, in points.
    - parameter color: Optional color to be applied to the icon.
    - parameter edgeInsets: Optional edge insets to be used as horizontal and vertical margins.
    */
    @objc class func attributedString(
        with{{enumName}} icon: {{enumName}},
        pointSize: CGFloat,
        color: UIColor?,
        edgeInsets: UIEdgeInsets) -> NSAttributedString? {
        return icon.attributedString(pointSize: pointSize,
            color: color,
            edgeInsets: edgeInsets)
    }

    /**
    Creates an image out of an attributed string with the specified icon enum type.

    - parameter icon: The icon enum type.
    - parameter size: The size of the image.
    - parameter color: Optional color to be applied to the icon.
    */
    @objc class func image(with{{enumName}} icon: {{enumName}},
        size: CGSize,
        color: UIColor?) -> UIImage? {
        return icon.image(size: size, color: color)
    }

    /**
    Returns a string representation of an unicode for the specified icon enum type.

    - parameter icon: The icon enum type.
    - returns An unicode string representation.
    */
    @objc class func unicodeString(with{{enumName}} icon: {{enumName}}) -> String? {
        return icon.unicode
    }
}

public extension UIBarButtonItem {

    /**
    Initializes a new item using the specified icon enum type and other properties.

    - parameter icon: The icon enum type to be used as image.
    - parameter size: The size of the image, in points.
    - parameter color: The color of the image, default to black.
    - parameter target: The object that receives the action message.
    - parameter action: The action to send to target when this item is selected.
    */
    @objc convenience init(with{{enumName}} icon: {{enumName}},
        size: CGSize,
        color: UIColor?,
        target: AnyObject?,
        action: Selector) {
        let image = icon.image(size: size, color: color ?? .blackColor())
        self.init(image: image, style: .Plain, target: target, action: action)
    }
}

public extension UITabBarItem {

    /**
    Initializes a new item using the specified icon enum type and other properties.

    - parameter icon: The icon enum type to be used as image.
    - parameter size: The size of the image.
    - parameter color: The color of the image, default is black
    - parameter title: The item's title. If nil, a title is not displayed.
    - parameter tag: The receiver's tag, an integer that you can use to identify bar item objects in your application.
    */
    @objc convenience init(with{{enumName}} icon: {{enumName}},
        size: CGSize,
        color:UIColor?,
        title: String?,
        tag: Int) {
        let image = icon.image(size: size, color: color ?? .blackColor())
        self.init(title: title, image: image, tag: tag)
    }
}

public extension UIButton {

    /**
    Sets the icon to use for the specified state.

    - parameter icon: The icon enum type to be used as image.
    - parameter size: The size of the image.
    - parameter color: The color of the image.
    - parameter state: The state that uses the specified title. The values are described in UIControlState.
    */
    @objc func setIconImage(with{{enumName}} icon: {{enumName}},
        size: CGSize,
        color:UIColor?,
        forState state: UIControlState) {
        let image = icon.image(size: size, color: color)
        setImage(image, forState: state)
    }
}


/**
A list with available glyphs detected from the icon font.
*/

@objc public enum {{enumName}}: Int {
    {% for icon in icons %}
    case {{icon.name|swiftIdentifier|snakeToCamelCase}}
    {% endfor %}

    public static var count: Int { return {{ icons.count }} }
}

extension {{enumName}} : IconFont {
    public var unicode:String {
        switch self {
        {% for icon in icons %}
        case .{{icon.name|swiftIdentifier|snakeToCamelCase}}: return "{{icon.unicode|unicodeCase}}"
        {% endfor %}
        }
    }

    public var name: String {
        switch self {
        {% for icon in icons %}
        case .{{icon.name|swiftIdentifier|snakeToCamelCase}}: return "{{icon.name|swiftIdentifier|snakeToCamelCase}}"
        {% endfor %}
        }
    }

    public static var familyName:String {
        return "{{familyName}}"
    }

    public static var fontFile:String {
        return "{{fontFile}}"
    }
}

{% else %}
// No icon found
{% endif %}